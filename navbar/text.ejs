
  <!-- Style text -->
  <style>
        

    .heading {
      font-family: "Playfair Display", serif;
      font-size: 10vw;
      text-align: center;
    }
    
    .subheading {
      font-family: "Open Sans", sans-serif;
      font-size: 1em;
      line-height: 1.5;
      text-align: center;
    }
    
    @media screen and (min-width: 40em) {
      body {
        width: 50%;
      }
    
      .heading {
        font-size: 5vw;
      }
    
      .subheading {
        font-size: 1.75vw;
      }
    }
    /*================================================
    Start Important Part
    ==================================================*/
    .underline--magical {
      background-image: linear-gradient(120deg, #84fab0 0%, #8fd3f4 100%);
      background-repeat: no-repeat;
      background-size: 100% 0.2em;
      background-position: 0 88%;
      transition: background-size 0.25s ease-in;
    }
    .underline--magical:hover {
      background-size: 100% 88%;
    }
    
@media only screen and (max-width: 600px) {
    .body {
        width: 80%;
        text-align: end;
    }
    .div{
        width: 80%;
        text-align: end;
    }
    .html{
        width: 50%;
    }
    .console-container{
        font-size: 50px;
        width: 240%;
    }
    .giphy-embed {
      width: 1px;
      height: 1px;
    }
    .main-title .col-12{
      width: 30px;
    }
    .about-title, .sfa-check{
      width: 90%;
      text-align: center;
    }
    .pclass {
      width: 90%;
    }
}
    /*================================================
    End Important Part
    ==================================================*/
      </style>
    


      <h1 style="width: 100%; text-align: center;" class="heading">Look At This <span class="underline--magical">Pretty</span> Underline</h1>
      <h2 style="width: 100%; text-align: center;" class="subheading">Being a mother the complexity that this has for bringing many opinions and beliefs, I think it would be easier to be a theoretical scientist than to really <span class="underline--magical">understand how to be a mother</span> and, for men, we can only understand what is shown and told us. But I think that a mother's love is not something automatic, but like all love and, even with the child, this love enters into a potential state.</h2>
      
      <h2 style="width: 100%; text-align: center;" class="subheading">
        We don't all have the best mother in the world, but we are grateful for every moment we spend with our candles,<span class="underline--magical"> we dedicate ourselves more and more to make </span> them proud who think and value our well-being, just like they do after the pregnancy that they gain more courage to build a better life for them as a small human life now depends on it.</h2>
      
      <h2 style="width: 100%; text-align: center;" class="subheading">You don't know true love, until you're a mother or father, after all because you would work days and nights to  <span class="underline--magical">support someone who practically </span> does nothing but give you more and more work, only in this small text we can understand how powerful this is. love.</h2>
      

<br>
<br>
<br>
<br>
      <!-- Script text -->
    <script>
    // VARIABLES
    const magicalUnderlines = Array.from(
    document.querySelectorAll(".underline--magical"));
    
    
    const gradientAPI =
    "https://gist.githubusercontent.com/wking-io/3e116c0e5675c8bcad8b5a6dc6ca5344/raw/4e783ce3ad0bcd98811c6531e40256b8feeb8fc8/gradient.json";
    
    // HELPER FUNCTIONS
    
    // 1. Get random number in range. Used to get random index from array.
    const randNumInRange = max => Math.floor(Math.random() * (max - 1));
    
    // 2. Merge two separate array values at the same index to
    // be the same value in new array.
    const mergeArrays = (arrOne, arrTwo) =>
    arrOne.map((item, i) => `${item} ${arrTwo[i]}`).join(", ");
    
    // 3. Curried function to add a background to array of elms
    const addBackground = elms => color => {
      elms.forEach(el => {
        el.style.backgroundImage = color;
      });
    };
    // 4. Function to get data from API
    const getData = async url => {
      const response = await fetch(url);
      const data = await response.json();
      return data.data;
    };
    
    // 5. Partial Application of addBackground to always apply
    // background to the magicalUnderlines constant
    const addBackgroundToUnderlines = addBackground(magicalUnderlines);
    
    // GRADIENT FUNCTIONS
    
    // 1. Build CSS formatted linear-gradient from API data
    const buildGradient = (obj) =>
    `linear-gradient(${obj.direction}, ${mergeArrays(
    obj.colors,
    obj.positions)
    })`;
    
    // 2. Get single gradient from data pulled in array and
    // apply single gradient to a callback function
    const applyGradient = async (url, callback) => {
      const data = await getData(url);
      const gradient = buildGradient(data[randNumInRange(data.length)]);
      callback(gradient);
    };
    
    // RESULT
    applyGradient(gradientAPI, addBackgroundToUnderlines);
    </script>